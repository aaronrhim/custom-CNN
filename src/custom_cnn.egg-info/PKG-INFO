Metadata-Version: 2.4
Name: custom-cnn
Version: 0.1.0
Summary: Custom CNN on CIFAR-10 using Keras (from a notebook to a Python package)
Author: Your Name
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: tensorflow>=2.10
Requires-Dist: numpy
Requires-Dist: scikit-learn
Requires-Dist: matplotlib
Requires-Dist: opencv-python

# custom-CNN

Converted from a Jupyter notebook into a full Python project.

This package trains and evaluates a simple CNN on CIFAR-10 using Keras (TensorFlow). It mirrors the original Sequential model and training flow from the notebook.

## Project Structure

- `src/custom_cnn/` — Package modules
  - `data.py` — Load and preprocess CIFAR-10 (normalize, shuffle, val split)
  - `model.py` — Build the Sequential CNN
  - `training.py` — Compile and fit with callbacks (EarlyStopping, ReduceLROnPlateau)
  - `evaluation.py` — Evaluate and produce a classification report
  - `cli.py` — Simple CLI for training and evaluation
- `SequentialModel.ipynb` — Original notebook (kept for reference)
- `pyproject.toml` — Build configuration
- `requirements.txt` — Dependencies
- `.gitignore` — Common ignores plus `models/` output directory

## Setup

Create and activate a virtual environment (recommended), then install:

```
pip install -r requirements.txt
pip install -e .
```

This exposes the CLI `custom-cnn`.

## Usage

- Train and save a model:

```
custom-cnn train --epochs 50 --batch-size 64 --output-dir models
```

- Evaluate a saved model and print a classification report:

```
custom-cnn eval --model models/model.keras --report
```

You can also run the CLI via Python:

```
python -m custom_cnn.cli train --epochs 10
python -m custom_cnn.cli eval --model models/model.keras --report
```

## Notes

- The implementation uses TensorFlow/Keras as per the notebook. If you prefer PyTorch, we can port the architecture and training loop accordingly.
- CIFAR-10 is downloaded via `tensorflow.keras.datasets` on first run.
